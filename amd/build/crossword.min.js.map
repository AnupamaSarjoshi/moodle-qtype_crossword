{"version":3,"file":"crossword.min.js","sources":["../src/crossword.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript to make crossword question.\n *\n * @module qtype_crossword/crossword\n * @copyright 2022 The Open University\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since 3.11\n */\n\ndefine(function() {\n\n    'use strict';\n\n    // Arrow Left key.\n    const ARROW_LEFT = 'ArrowLeft';\n    // Arrow Right key.\n    const ARROW_RIGHT = 'ArrowRight';\n    // Arrow Up key.\n    const ARROW_UP = 'ArrowUp';\n    // Arrow Down key.\n    const ARROW_DOWN = 'ArrowDown';\n    // End key.\n    const END = 'End';\n    // Home key.\n    const HOME = 'Home';\n    // Delete key.\n    const DELETE = 'Delete';\n    // Backspace key.\n    const BACKSPACE = 'Backspace';\n    // Z key.\n    const Z_KEY = 'z';\n    // A key.\n    const A_KEY = 'a';\n    // Enter key.\n    const ENTER = 'Enter';\n    // Regular expression pattern for input filter.\n    const FILTER_REGEX = /[-@!$%^&*()_+|~=`\\\\#{}\\[\\]:\";'<>?,.\\/]/gi;\n\n    /**\n     * Object to handle Crossword.\n     *\n     * @param {Object} options List options for crossword.\n     * @constructor\n     */\n    function CrossWordQuestion(options) {\n        // Default options.\n        let defaultOption = {\n            colsNum: 10,\n            rowsNum: 10,\n            words: [],\n            target: '#crossword',\n            isPreview: false,\n            previewSetting: {backgroundColor: '#ffffff', borderColor: '#000000', textColor: '#ffffff', conflictColor: '#f4cece'},\n            cellWidth: 31,\n            cellHeight: 31,\n            wordNumber: -1,\n            coordinates: ''\n        };\n        // Merge options.\n        defaultOption = {...defaultOption, ...options};\n        this.options = defaultOption;\n        this.isPreview = defaultOption.isPreview;\n\n        // Get target element.\n        const targetEls = document.querySelectorAll(defaultOption.target);\n        for (let i = 0; i < targetEls.length; i++) {\n            if (!targetEls[i].querySelector('svg')) {\n                this.crosswordEl = targetEls[i];\n                break;\n            }\n        }\n    }\n\n    /**\n     * Build the background table.\n     */\n    CrossWordQuestion.prototype.buildBackgroundTable = function() {\n        const alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'\n        ];\n        let {colsNum, rowsNum, previewSetting} = this.options;\n        let style = previewSetting;\n\n        // Create table element.\n        const tableEl = document.createElement('table');\n\n        // Preview mode will add one more columns and row to add the coordinate helper.\n        colsNum++;\n        rowsNum++;\n\n        tableEl.className = 'crossword-grid';\n        // Set the background color.\n        tableEl.style.backgroundColor = style.backgroundColor;\n\n        for (let i = 0; i < rowsNum; i++) {\n            const rowEl = document.createElement('tr');\n            rowEl.className = 'grid-row';\n            for (let j = 0; j < colsNum; j++) {\n                // Create square.\n                let squareEl = document.createElement('td');\n                squareEl.className = 'grid-square';\n                squareEl.style.borderColor = style.borderColor;\n                squareEl.style.color = style.color;\n\n                if (i === 0 && j === 0) {\n                    squareEl.classList.add('cell-white');\n                }\n\n                // Adding alphanumeric.\n                if (i === 0 && j !== 0) {\n                    squareEl.innerText = alphabet[j - 1];\n                    squareEl.classList.add('square-indicate-horizontal');\n                }\n                if (i !== 0 && j === 0) {\n                    squareEl.innerText = i;\n                    squareEl.classList.add('square-indicate-vertical');\n                }\n                rowEl.append(squareEl);\n            }\n            tableEl.append(rowEl);\n        }\n        this.tableEl = tableEl;\n        this.crosswordEl.innerHTML = tableEl.outerHTML;\n    };\n\n    /**\n     * Add each cell into table.\n     */\n    CrossWordQuestion.prototype.addCell = function() {\n        let {words, previewSetting, rowsNum, colsNum} = this.options;\n        // Don't draw empty words.\n        if (words.length === 0) {\n            return;\n        }\n        for (let i = 0; i < words.length; i++) {\n            let row = words[i].rowindex + 1;\n            let column = words[i].columnindex + 1;\n            let answerLength = words[i].answer.length;\n            let realLength = answerLength + words[i].columnindex;\n            let allowLength = parseInt(colsNum);\n            let invalidWord = words[i].clue.trim() === '';\n            // Add more columns and row for preview.\n            row++;\n            column++;\n\n            if (!invalidWord) {\n                invalidWord = FILTER_REGEX.test(words[i].answer);\n            }\n\n            if (words[i].orientation) {\n                realLength = answerLength + words[i].rowindex;\n                allowLength = parseInt(rowsNum);\n            }\n\n            for (let j = 0; j < words[i].answer.length; j++) {\n                const number = i + 1;\n                const squareEl = document.querySelector('.grid-row:nth-child(' + row + ') .grid-square:nth-child(' + column + ')');\n                if (!squareEl) {\n                    continue;\n                }\n\n                // Paint white background.\n                squareEl.classList.add('background-white');\n\n                if (j === 0) {\n                    const labelEl = squareEl.querySelector('.word-label');\n                    if (!labelEl) {\n                        let spanEl = document.createElement('span');\n                        spanEl.className = 'word-label';\n                        spanEl.innerText = words[i]?.no ?? number;\n                        squareEl.append(spanEl);\n                    } else {\n                        let label = labelEl.innerText;\n                        label += ', ' + words[i]?.no ?? number;\n                        labelEl.innerText = label;\n                    }\n                }\n                const letter = words[i].answer[j].toUpperCase().trim() ?? '';\n                const contentEl = squareEl.querySelector('span.word-content');\n                if (!contentEl) {\n                    let spanEl = document.createElement('span');\n                    spanEl.className = 'word-content';\n                    spanEl.innerText = letter;\n                    squareEl.append(spanEl);\n                } else {\n                    let text = '';\n                    const innerText = contentEl.innerText;\n                    if (innerText.search(letter) < 0) {\n                        text = innerText + ' | ' + letter;\n                        squareEl.style.backgroundColor = previewSetting.conflictColor;\n                        contentEl.innerText = text;\n                    }\n                }\n\n                if (invalidWord || realLength > allowLength) {\n                    squareEl.style.backgroundColor = previewSetting.conflictColor;\n                }\n\n                if (words[i].orientation) {\n                    row++;\n                } else {\n                    column++;\n                }\n            }\n        }\n    };\n\n    /**\n     * Build crossword to attempt.\n     */\n    CrossWordQuestion.prototype.buildCrossword = function() {\n        const options = this.options;\n        // Setup size of crossword.\n        this.options = {...options, width: options.colsNum * 32 + 1, height: options.rowsNum * 32 + 1};\n        // Set up for clue input: maxlength, aria-label.\n        this.setUpClue();\n        // Draw crossword by SVG to support high contrast mode.\n        this.drawCrosswordSVG();\n        // Sync data between clue section and crossword cell.\n        this.syncDataForInit();\n        // Add event when resized screen.\n        this.addEventResizeScreen();\n    };\n\n    /**\n     * Set up for clue section.\n     */\n    CrossWordQuestion.prototype.setUpClue = function() {\n        let {words, readonly} = this.options;\n        const clueEls = this.crosswordEl.closest('.contain-crossword').querySelectorAll('.contain-clue .wrap-clue');\n        clueEls.forEach(el => {\n            const questionId = el.getAttribute('question-id');\n            let word = words.find(o => o.number === parseInt(questionId));\n            if (word) {\n                const inputEl = el.querySelector('input');\n                inputEl.value += this.makeUnderscore(word.length - inputEl.value.length);\n                if (!readonly) {\n                    inputEl.disabled = false;\n                }\n                // Add event for input.\n                this.addEventForClueInput(inputEl, word);\n            }\n        });\n    };\n\n    /**\n     * Draw crossword by SVG element.\n     */\n    CrossWordQuestion.prototype.drawCrosswordSVG = function() {\n        const options = this.options;\n        const crosswordEl = this.crosswordEl;\n\n        if (!crosswordEl) {\n            return;\n        }\n\n        // Create background.\n        let svg = this.createElementNSFrom(\n            'svg',\n            {\n                'class': 'crossword-grid',\n                viewBox: `0 0 ${options.width} ${options.height}`\n            }\n        );\n\n        // Create black background.\n        const rectEl = this.createElementNSFrom(\n            'rect',\n            {\n                'class': 'crossword-grid-background',\n                x: 0,\n                y: 0,\n                width: options.width,\n                height: options.height\n            }\n        );\n        svg.append(rectEl);\n\n        // Create svg body.\n        svg = this.createCrosswordBody(svg);\n\n        // Create an input, by default, it will be hidden.\n        const inputContainEl = this.createElementFrom(\n            'div',\n            {\n                'class': 'crossword-hidden-input-wrapper'\n            }\n        );\n        const inputEl = this.createElementFrom(\n            'input',\n            {\n                type: 'text',\n                'class': 'crossword-hidden-input',\n                maxlength: 1,\n                autocomplete: 'off',\n                spellcheck: false,\n                autocorrect: 'off'\n            }\n        );\n        // Add event for word input.\n        this.addEventForWordInput(inputEl);\n        inputContainEl.append(inputEl);\n        crosswordEl.append(svg, inputContainEl);\n    };\n\n    /**\n     * Sync data between clue section and crossword.\n     */\n    CrossWordQuestion.prototype.syncDataForInit = function() {\n        const {words} = this.options;\n        // Loop every input into clue section.\n        this.crosswordEl.closest('.contain-crossword').querySelectorAll('.wrap-clue input')\n            .forEach(element => {\n                // Tricky, update word number.\n                this.options.wordNumber = parseInt(element.closest('.wrap-clue').getAttribute('question-id'));\n                const word = words.find(o => o.number === this.options.wordNumber);\n                if (!word) {\n                    return;\n                }\n                // Sorting and Updating letter index.\n                this.updateLetterIndexForCells(word);\n                // The value will be filled into the valid cell.\n                this.syncLettersByText(element.value, false);\n            });\n        // Set wordNumber by default value.\n        this.options.wordNumber = -1;\n    };\n\n\n    /**\n     * Calculate position and add cell into the crossword.\n     *\n     * @param {Element} svg  The svg element.\n     * @return {Element} The svg element.\n     */\n    CrossWordQuestion.prototype.createCrosswordBody = function(svg) {\n        const {words, cellWidth, cellHeight} = this.options;\n        let count = 0;\n        for (let i in words) {\n            const word = words[i];\n            for (let key = 0; key < word.length; key++) {\n                // Prepare attributes for g.\n                const customAttribute = {\n                    rowIndex: word.rowIndex,\n                    columnIndex: word.columnIndex,\n                    letterIndex: key,\n                    word: '(' + word.number + ')',\n                    code: 'A' + count\n                };\n                // Calculate the letter position.\n                const position = this.calculatePosition(word, parseInt(key));\n                // Create rect element with these position.\n                const rectEl = this.createElementNSFrom(\n                    'rect',\n                    {\n                        ...position,\n                        width: cellWidth,\n                        height: cellHeight,\n                        'class': 'crossword-cell'\n                    }\n                );\n                // Create g element with the attributes.\n                let g = this.createElementNSFrom('g', {...customAttribute});\n                // Get exist ting rect element.\n                const existingRectElement = svg.querySelector(`rect.crossword-cell[x='${position.x}'][y='${position.y}']`);\n                // Create text element to hold the letter.\n                const textEl = this.createElementNSFrom(\n                    'text',\n                    {\n                        x: position.x + 11,\n                        y: position.y + 21,\n                        'class': 'crossword-cell-text'\n                    }\n                );\n                // Check if cell is not drawn.\n                if (!existingRectElement) {\n                    // Create cell.\n                    g.append(rectEl);\n                    // If it's the first cell of word.\n                    // Draw word number.\n                    if (parseInt(key) === 0) {\n                        g = this.appendCellNumber(g, position, word.number);\n                    }\n                    g.append(textEl);\n                    // Add event for cell.\n                    this.addEventForG(g);\n                    count++;\n                    svg.append(g);\n                } else {\n                    let existingNumberElement = existingRectElement.closest('g').querySelector('text.crossword-cell-number');\n                    let currentWord = existingRectElement.closest('g').getAttribute('word');\n                    let g;\n                    existingRectElement.closest('g').setAttributeNS(null, 'word', currentWord + '(' + word.number + ')');\n                    if (parseInt(key) === 0) {\n                        if (existingNumberElement) {\n                            // Append word number, if this cell is existed another one.\n                            existingNumberElement.append(', ' + word.number);\n                        } else {\n                            // Create new word number.\n                            g = existingRectElement.closest('g');\n                            this.appendCellNumber(g, position, word.number);\n                        }\n                    }\n                }\n            }\n        }\n        return svg;\n    };\n\n    /**\n     * Calculate the position of each letter of the word.\n     *\n     * @param {Object} word The current word object.\n     * @param {Number} key The letter index of word.\n     *\n     * @return {Object} The coordinates of letter.\n     */\n    CrossWordQuestion.prototype.calculatePosition = function(word, key) {\n        const {cellWidth, cellHeight} = this.options;\n        let x = (cellWidth * word.columnIndex) + (word.columnIndex + 1);\n        let y = (cellHeight * word.rowIndex) + (word.rowIndex + 1);\n        if (word.orientation) {\n            y += (key * cellHeight) + key;\n        } else {\n            x += (key * cellWidth) + key;\n        }\n        return {x, y};\n    };\n\n    /**\n     * Create word number for the cell.\n     *\n     * @param {Element} g The g element.\n     * @param {Object} position The coordinates of letter.\n     * @param {Number} wordNumber The word number.\n     *\n     * @return {Element} The g element.\n     */\n    CrossWordQuestion.prototype.appendCellNumber = function(g, position, wordNumber) {\n        // Update position.\n        const x = position.x + 1;\n        const y = position.y + 9;\n        let textNumber = this.createElementNSFrom(\n            'text',\n            {\n                x,\n                y,\n                'class': 'crossword-cell-number'\n            }\n        );\n        textNumber.append(wordNumber);\n        g.append(textNumber);\n        return g;\n    };\n\n     /**\n      * Handle action when click on cell.\n      *\n      * @param {Element} gEl The g element.\n      */\n    CrossWordQuestion.prototype.handleWordSelect = function(gEl) {\n        const currentCell = gEl.getAttributeNS(null, 'code');\n        let words = gEl.getAttributeNS(null, 'word');\n        let focus = -1;\n        let {coordinates, wordNumber} = this.options;\n\n        // Detect word number.\n        words = words.match(/(\\d+)/g);\n\n        // Detect word number based on event click.\n        // The focus variable is the new word number.\n        if (currentCell === coordinates) {\n            const indexCell = words.indexOf(wordNumber);\n            if (words[indexCell + 1] !== undefined) {\n                focus = words[indexCell + 1];\n            } else {\n                focus = words[0];\n            }\n        } else {\n            // Update new coordinates.\n            this.options.coordinates = currentCell;\n            if (wordNumber < 0) {\n                this.options.wordNumber = words[0];\n            }\n            if (words.includes(wordNumber)) {\n                focus = wordNumber;\n            } else {\n                focus = words[0];\n            }\n        }\n        // Update word number.\n        this.options.wordNumber = focus;\n        const word = this.options.words.find(o => o.number === parseInt(focus));\n        if (!word) {\n            return;\n        }\n        // Sorting and Updating letter index.\n        this.updateLetterIndexForCells(word);\n        // Toggle highlight and focused.\n        this.toggleHighlight(word, gEl);\n        // Focus the clue.\n        this.focusClue();\n        // Update sticky clue for mobile version.\n        this.setStickyClue();\n    };\n\n    /**\n     * Creates an element with the specified namespace URI and qualified name.\n     *\n     * @param {String} type\n     * @param {Object} attributes\n     *\n     * @return {Element} The return element.\n     */\n    CrossWordQuestion.prototype.createElementNSFrom = function(type, attributes = {}) {\n        const element = document.createElementNS('http://www.w3.org/2000/svg', type);\n        for (let key in attributes) {\n            element.setAttributeNS(null, key, attributes[key]);\n        }\n        return element;\n    };\n\n    /**\n     * Create element with attributes.\n     *\n     * @param {String} type\n     * @param {Object} attributes The attribute list.\n     * @return {Element} The return element.\n     */\n    CrossWordQuestion.prototype.createElementFrom = function(type, attributes = {}) {\n        const element = document.createElement(type);\n        for (let key in attributes) {\n            element.setAttribute(key, attributes[key]);\n        }\n        return element;\n    };\n\n    /**\n     * Toggle focus the clue.\n     */\n    CrossWordQuestion.prototype.focusClue = function() {\n        const {wordNumber} = this.options;\n        const containCrosswordEl = this.crosswordEl.closest('.contain-crossword');\n        const clueEl = containCrosswordEl.querySelector(`.wrap-clue[question-id='${wordNumber}']`);\n        const clueFocusEl = containCrosswordEl.querySelector(`.wrap-clue.focus`);\n        // Remove the current focus cell.\n        if (clueFocusEl) {\n            clueFocusEl.classList.remove('focus');\n        }\n        // Add focus cell.\n        if (clueEl) {\n            clueEl.classList.add('focus');\n        }\n    };\n\n    /**\n     * Set sticky clue for the mobile version.\n     */\n    CrossWordQuestion.prototype.setStickyClue = function() {\n        const stickyClue = this.crosswordEl.closest('.contain-crossword').querySelector('.sticky-clue');\n        const {wordNumber, words} = this.options;\n        const word = words.find(o => o.number === parseInt(wordNumber));\n        if (stickyClue && word) {\n            stickyClue.querySelector('strong').innerText = `${word.number} ${word.orientation ? 'Down' : 'Across'}`;\n            stickyClue.querySelector('span').innerText = word.clue;\n        }\n    };\n\n    /**\n     * Update the letter index of the word based on the word selected.\n     *\n     * @param {Object} word The word object.\n     */\n    CrossWordQuestion.prototype.updateLetterIndexForCells = function(word) {\n        const {wordNumber} = this.options;\n        const letterList = this.crosswordEl.querySelectorAll(`g[word*='(${wordNumber})']`);\n        // Convert letterList to array to use sort function.\n        const letterListArray = Array.prototype.slice.call(letterList, 0);\n        let letterIndex = 0;\n        // Rearrange the letters in the correct order.\n        letterListArray.sort((a, b) => {\n            let aValue = parseInt(a.querySelector('rect').getAttributeNS(null, 'x'));\n            let bValue = parseInt(b.querySelector('rect').getAttributeNS(null, 'x'));\n            if (word.orientation) {\n                aValue = parseInt(a.querySelector('rect').getAttributeNS(null, 'y'));\n                bValue = parseInt(b.querySelector('rect').getAttributeNS(null, 'y'));\n            }\n            return aValue - bValue;\n        }).forEach(el => {\n            // Update letter index.\n            el.setAttributeNS(null, 'letterIndex', letterIndex);\n            letterIndex++;\n        });\n    };\n\n    /**\n     * Toggle the highlight cells.\n     *\n     * @param {Object} word The word object.\n     * @param {Element} gEl The g element.\n     */\n    CrossWordQuestion.prototype.toggleHighlight = function(word, gEl) {\n        const {wordNumber, orientation, title} = this.options;\n        const focus = wordNumber;\n        const focusedEl = this.crosswordEl.querySelector('.crossword-cell-focussed');\n        if (focusedEl) {\n            focusedEl.classList.remove('crossword-cell-focussed');\n        }\n        // Remove current highlight cells.\n        this.crosswordEl.querySelectorAll('.crossword-cell-highlighted')\n            .forEach(el => el.classList.remove('crossword-cell-highlighted'));\n        // Set highlight cells.\n        this.crosswordEl.querySelectorAll(`g[word*='(${focus})'] rect`)\n            .forEach(el => {\n                let titleData = '';\n                if (el.closest('g').getAttributeNS(null, 'code') === gEl.getAttributeNS(null, 'code')) {\n                    el.classList.add('crossword-cell-focussed');\n                    // Update aria label.\n                    let letterIndex = parseInt(el.closest('g').getAttributeNS(null, 'letterIndex'));\n                    const data = {\n                        row: word.rowIndex + 1,\n                        column: word.columnIndex + letterIndex + 1,\n                        number: word.number,\n                        orientation: orientation[word.orientation],\n                        clue: word.clue,\n                        letter: letterIndex + 1,\n                        count: word.length\n                    };\n                    if (word.orientation) {\n                        data.row = word.rowIndex + letterIndex + 1;\n                        data.column = word.columnIndex + 1;\n                    }\n                    titleData = this.replaceStringData(title, data);\n                    this.crosswordEl.querySelector('input.crossword-hidden-input')\n                        .setAttributeNS(null, 'aria-label', titleData);\n\n                } else {\n                    el.classList.add('crossword-cell-highlighted');\n                }\n            }\n        );\n    };\n\n    /**\n     * Bind data to the clue.\n     *\n     * @param {Element} gEl The word letter.\n     * @param {String} key The letter data.\n     */\n    CrossWordQuestion.prototype.bindDataToClueInput = function(gEl, key) {\n        const {words, cellWidth, cellHeight} = this.options;\n        const rectEl = gEl.querySelector('rect');\n        const conflictPointX = rectEl.getAttributeNS(null, 'x');\n        const conflictPointY = rectEl.getAttributeNS(null, 'y');\n        let letterIndex, value;\n        if (gEl) {\n            let wordIds = gEl.getAttributeNS(null, 'word').match(/\\d+/g);\n            wordIds.forEach(wordId => {\n                const word = words.find(o => o.number === parseInt(wordId));\n                if (word) {\n                    const startPoint = this.calculatePosition(word, 0);\n                    if (word.orientation) {\n                        letterIndex = (parseInt(conflictPointY) - startPoint.y) / (cellHeight + 1);\n                    } else {\n                        letterIndex = (parseInt(conflictPointX) - startPoint.x) / (cellWidth + 1);\n                    }\n                    const clueInputEl = this.crosswordEl\n                        .closest('.contain-crossword')\n                        .querySelector(`.wrap-clue[question-id='${wordId}'] input`);\n                    value = this.replaceAt(clueInputEl.value, letterIndex, key);\n                    clueInputEl.value = value.toUpperCase();\n                }\n            });\n        }\n    };\n\n    /**\n     * Toggle the focus cell.\n     *\n     * @param {Element} gEl The word letter.\n     */\n    CrossWordQuestion.prototype.toggleFocus = function(gEl) {\n        const focused = this.crosswordEl.querySelector('g rect.crossword-cell-focussed');\n        if (focused) {\n            focused.classList.remove('crossword-cell-focussed');\n            focused.classList.add('crossword-cell-highlighted');\n        }\n        gEl.querySelector('rect').classList.add('crossword-cell-focussed');\n    };\n\n    /**\n     * Replace string data.\n     *\n     * @param {String} str The string need to be replaced.\n     * @param {Object} data The data.\n     *\n     * @return {String} The replaced string.\n     */\n    CrossWordQuestion.prototype.replaceStringData = function(str, data) {\n        for (let key in data) {\n            str = str.replace(`{${key}}`, data[key]);\n        }\n        return str;\n    };\n\n    /**\n     * Focus cell base on the start index.\n     *\n     * @param {Element} startIndex The start index.\n     * @param {String} word The word data.\n     */\n    CrossWordQuestion.prototype.focusCellByStartIndex = function(startIndex, word) {\n        let position = this.calculatePosition(word, startIndex);\n        const rect = this.crosswordEl.querySelector(`g rect[x='${position.x}'][y='${position.y}']`);\n        if (rect) {\n            this.options.wordNumber = word.number;\n            this.toggleHighlight(word, rect.closest('g'));\n            this.updateLetterIndexForCells(word);\n        }\n    };\n\n    /**\n     * Sync data to crossword cell from text.\n     *\n     * @param {Element} text The text data.\n     * @param {Boolean} [bindClue=false] Check if bind data into clue.\n     */\n    CrossWordQuestion.prototype.syncLettersByText = function(text, bindClue = true) {\n        const {wordNumber} = this.options;\n        for (let i in text) {\n            const gEl = this.crosswordEl.querySelector(`g[word*='(${wordNumber})'][letterIndex='${i}']`);\n            if (gEl) {\n                const letter = text[i].toUpperCase();\n                const textEl = gEl.querySelector('text.crossword-cell-text');\n                if (text[i] !== '_') {\n                    textEl.innerHTML = letter;\n                } else {\n                    textEl.innerHTML = '';\n                }\n                if (bindClue) {\n                    this.bindDataToClueInput(gEl, letter);\n                }\n            }\n        }\n    };\n\n    /**\n     * Focus crossword cell from the start index.\n     *\n     * @param {Element} target The element.\n     * @param {Number} startIndex The start index.\n     */\n    CrossWordQuestion.prototype.syncFocusCellAndInput = function(target, startIndex) {\n        const {wordNumber} = this.options;\n        const gEl = this.crosswordEl.querySelector(`g[word*='(${wordNumber})'][letterIndex='${startIndex}']`);\n        target.setSelectionRange(startIndex, startIndex);\n        if (gEl) {\n            this.toggleFocus(gEl);\n        }\n    };\n\n    /**\n     * Focus crossword cell from the start index.\n     *\n     * @param {String} value The value string need to be replaced.\n     * @return {String} The value data.\n     */\n    CrossWordQuestion.prototype.replaceText = function(value) {\n        return value.replace(FILTER_REGEX, '');\n    };\n\n    /**\n     * Add event to the g element.\n     *\n     * @param {Element} g The g element.\n     */\n    CrossWordQuestion.prototype.addEventForG = function(g) {\n        const {readonly} = this.options;\n        if (readonly) {\n            return;\n        }\n        // Handle event click.\n        g.addEventListener('click', (e) => {\n            const inputWrapperEl = this.crosswordEl.querySelector('.crossword-hidden-input-wrapper');\n            const inputEl = inputWrapperEl.querySelector('input');\n            let element = e.target;\n            // Make sure select g.\n            if (element.tagName !== 'g') {\n                element = element.closest('g');\n            }\n            this.handleWordSelect(element);\n            inputEl.setAttributeNS(null, 'code', element.getAttributeNS(null, 'code'));\n            inputEl.value = '';\n            this.updatePositionForCellInput(element.querySelector('rect'));\n            inputEl.focus();\n        });\n    };\n\n    /**\n     * Set size and position for cell input.\n     *\n     * @param {Element} [rectEl=null] Rect element.\n     */\n    CrossWordQuestion.prototype.updatePositionForCellInput = function(rectEl = null) {\n        if (rectEl === null) {\n            rectEl = this.crosswordEl.querySelector('rect.crossword-cell-focussed');\n        }\n        if (rectEl) {\n            const rect = rectEl.getBoundingClientRect();\n            const parentEl = this.crosswordEl.querySelector('.crossword-grid').getBoundingClientRect();\n            const inputWrapperEl = this.crosswordEl.querySelector('.crossword-hidden-input-wrapper');\n            let top = rect.top - parentEl.top;\n            if (top < 1) {\n                top = 1;\n            }\n            inputWrapperEl.style.cssText = `\n                display: block; top: ${top}px;\n                left: ${rect.left - parentEl.left}px;\n                width: ${rect.width}px;\n                height: ${rect.height}px\n            `;\n        }\n    };\n\n    /**\n     * Add event to word input element.\n     *\n     * @param {Element} inputEl The input element.\n     */\n    CrossWordQuestion.prototype.addEventForWordInput = function(inputEl) {\n        const {readonly} = this.options;\n        if (readonly) {\n            return;\n        }\n        inputEl.addEventListener('keypress', (e) => {\n            e.preventDefault();\n            const {wordNumber} = this.options;\n            const inputEl = e.target;\n            const code = inputEl.getAttributeNS(null, 'code');\n            let value = e.key.toUpperCase();\n            if (this.replaceText(e.key) === '') {\n                return false;\n            }\n            // Filter value.\n            if (code) {\n                const textEl = this.crosswordEl.querySelector(`g[code='${code}'] text.crossword-cell-text`);\n                if (!textEl) {\n                    return false;\n                }\n                textEl.innerHTML = value;\n                const letterIndex = parseInt(textEl.closest('g').getAttributeNS(null, 'letterIndex'));\n                const nextCellEl = this.crosswordEl.querySelector(`g[word*='(${wordNumber})'][letterIndex='${letterIndex + 1}']`);\n                // Interact with clue.\n                this.bindDataToClueInput(textEl.closest('g'), e.key);\n                if (nextCellEl) {\n                    nextCellEl.dispatchEvent(new Event('click'));\n                }\n            }\n        });\n\n        inputEl.addEventListener('keyup', (event) => {\n            event.preventDefault();\n            const {wordNumber, cellWidth, cellHeight} = this.options;\n            const {key, target} = event;\n            const code = target.getAttributeNS(null, 'code');\n            const gEl = this.crosswordEl.querySelector(`g[code='${code}']`);\n            const letterIndex = parseInt(gEl.getAttributeNS(null, 'letterIndex'));\n            const previousCell = this.crosswordEl.querySelector(`g[word*='(${wordNumber})'][letterIndex='${letterIndex - 1}']`);\n            const textEl = gEl.querySelector('text.crossword-cell-text');\n            let x = parseInt(gEl.querySelector('rect').getAttributeNS(null, 'x'));\n            let y = parseInt(gEl.querySelector('rect').getAttributeNS(null, 'y'));\n            if (key === DELETE || key === BACKSPACE) {\n                if (textEl.innerHTML === '') {\n                    if (previousCell) {\n                        previousCell.dispatchEvent(new Event('click'));\n                    }\n                } else {\n                    textEl.innerHTML = '';\n                    this.bindDataToClueInput(gEl, '_');\n                }\n            }\n            if ([ARROW_UP, ARROW_DOWN, ARROW_LEFT, ARROW_RIGHT].includes(key)) {\n                if (key === ARROW_UP) {\n                    y -= (cellHeight + 1);\n                }\n                if (key === ARROW_DOWN) {\n                    y += (cellHeight + 1);\n                }\n                if (key === ARROW_LEFT) {\n                    x -= (cellWidth + 1);\n                }\n                if (key === ARROW_RIGHT) {\n                    x += (cellWidth + 1);\n                }\n                const nextCell = this.crosswordEl.querySelector(`g rect[x='${x}'][y='${y}']`);\n                if (nextCell) {\n                    nextCell.closest('g').dispatchEvent(new Event('click'));\n                }\n            }\n        });\n\n        inputEl.addEventListener('click', (e) => {\n            const inputEl = e.target;\n            const code = inputEl.getAttributeNS(null, 'code');\n            const gEl = this.crosswordEl.querySelector(`g[code='${code}']`);\n            this.handleWordSelect(gEl);\n        });\n\n        inputEl.addEventListener('keydown', (e) => {\n            let {key} = e;\n            key = key.toLowerCase();\n            if (e.ctrlKey) {\n                if (\n                    key === Z_KEY ||\n                    key === A_KEY\n                ) {\n                    e.preventDefault();\n                }\n            }\n\n            if (e.key === ENTER) {\n                e.preventDefault();\n            }\n        });\n\n        inputEl.addEventListener('paste', (e) => {\n            e.preventDefault();\n        });\n    };\n\n    /**\n     * Add event to word input element.\n     *\n     * @param {Element} el The input element.\n     * @param {String} word The word data.\n     */\n    CrossWordQuestion.prototype.addEventForClueInput = function(el, word) {\n        const {readonly} = this.options;\n        if (readonly) {\n            return;\n        }\n        el.addEventListener('click', (e) => {\n            let startIndex = e.target.selectionStart;\n            if (startIndex >= word.length) {\n                startIndex = word.length - 1;\n            }\n            this.focusCellByStartIndex(startIndex, word);\n            this.focusClue();\n            this.setStickyClue();\n        });\n\n        el.addEventListener('focus', (e) => {\n            e.target.dispatchEvent(new Event('click'));\n        });\n\n        el.addEventListener('keypress', (e) => {\n            e.preventDefault();\n            const {words, wordNumber} = this.options;\n            const word = words.find(o => o.number === parseInt(wordNumber));\n            let {key, target} = e;\n            let startIndex = target.selectionStart;\n            key = this.replaceText(key);\n            if (key === '') {\n                return;\n            }\n            const gelEl = this.crosswordEl.querySelector(`g[word*='(${wordNumber})'][letterIndex='${startIndex}']`);\n            if (gelEl) {\n                gelEl.querySelector('text.crossword-cell-text').innerHTML = key.toUpperCase();\n                this.bindDataToClueInput(gelEl, key.toUpperCase());\n            }\n            // Go to next letter.\n            startIndex++;\n            const nexEl = this.crosswordEl.querySelector(`g[word*='(${wordNumber})'][letterIndex='${startIndex}']`);\n            if (nexEl) {\n                this.toggleHighlight(word, nexEl);\n                target.setSelectionRange(startIndex, startIndex);\n            }\n        });\n\n        el.addEventListener('keyup', (event) => {\n            event.preventDefault();\n            const {words, wordNumber} = this.options;\n            const {key, target} = event;\n            let {value} = target;\n            if ([ARROW_LEFT, ARROW_RIGHT].includes(key)) {\n                const startIndex = target.selectionStart;\n                const gEl = this.crosswordEl.querySelector(`g[word*='(${wordNumber})'][letterIndex='${startIndex}']`);\n                if (gEl) {\n                    this.toggleHighlight(word, gEl);\n                }\n            }\n            if (key === DELETE || key === BACKSPACE) {\n                const word = words.find(o => o.number === parseInt(wordNumber));\n                let startIndex = target.selectionStart;\n                if (!word) {\n                    return;\n                }\n                value = value + this.makeUnderscore(word.length - value.length);\n                target.value = value;\n                this.syncLettersByText(value);\n                this.syncFocusCellAndInput(target, startIndex);\n            }\n\n            if (key === END || key === HOME) {\n                let startIndex = 0;\n                const word = words.find(o => o.number === parseInt(wordNumber));\n                if (!word) {\n                    return;\n                }\n                if (key === END) {\n                    startIndex = word.length - 1;\n                }\n                this.syncFocusCellAndInput(target, startIndex);\n            }\n        });\n\n        el.addEventListener('paste', (event) => {\n            event.preventDefault();\n            let value = (event.clipboardData || window.clipboardData).getData('text');\n            value = this.replaceText(value);\n            this.syncLettersByText(value);\n        });\n\n        el.addEventListener('keydown', (e) => {\n            if (e.ctrlKey && e.key.toLowerCase() === Z_KEY) {\n                e.preventDefault();\n            }\n            if (e.key === ENTER) {\n                e.preventDefault();\n            }\n        });\n\n        el.addEventListener('cut', (event) => {\n            const selectString = document.getSelection().toString();\n            const startIndex = event.target.selectionStart;\n            let {value} = event.target;\n            value = value.substring(0, startIndex) +\n                value.substring(startIndex + selectString.length) +\n                this.makeUnderscore(selectString.length);\n            event.target.value = value;\n            event.clipboardData.setData('text/plain', selectString);\n            event.preventDefault();\n            event.target.setSelectionRange(startIndex, startIndex);\n            this.syncLettersByText(value);\n        });\n    };\n\n    /**\n     * Add event to resize the screen width.\n     */\n    CrossWordQuestion.prototype.addEventResizeScreen = function() {\n        window.addEventListener('resize', () => {\n            this.updatePositionForCellInput();\n        });\n    };\n\n    /**\n     * Generate underscore letter by length.\n     *\n     * @param {Number} length Expected length.\n     *\n     * @return {String} Underscore string.\n     */\n    CrossWordQuestion.prototype.makeUnderscore = function(length) {\n        const arr = Array.from({length}, () => '_');\n        return arr.join('');\n    };\n\n    /**\n     * Replace letter at index.\n     *\n     * @param {String} text Text need to be replaced.\n     * @param {Number} index Letter index.\n     * @param {String} char The replace letter.\n     *\n     * @return {String} Underscore string.\n     */\n    CrossWordQuestion.prototype.replaceAt = function(text, index, char) {\n        var a = text.split('');\n        if (a[index] !== undefined) {\n            a[index] = char;\n        }\n        return a.join('');\n    };\n\n    /**\n     * Singleton that tracks all the CrosswordQuestions on this page.\n     *\n     * @type {Object}\n     */\n    const questionManager = {\n\n        /**\n         * Initialise questions.\n         *\n         * @param {Object} options Setting options.\n         */\n        init: function(options) {\n            const crossword = new CrossWordQuestion(options);\n            if (options.isPreview) {\n                crossword.buildBackgroundTable();\n                crossword.addCell();\n            } else {\n                crossword.buildCrossword();\n            }\n        },\n\n        /**\n         * Add event questions.\n         *\n         * @param {Object} options Id.\n         */\n        addEventHandlersReloadQuestion: function(options) {\n            const element = document.querySelector(options.element);\n            if (element) {\n                element.removeAttribute('disabled');\n                element.addEventListener('click', function(event) {\n                    event.preventDefault();\n                    const columnEl = document.querySelector('select[name=\"numcolumns\"]');\n                    const rowEl = document.querySelector('select[name=\"numrows\"]');\n                    const words = questionManager.getWordsFromTable(options.target);\n                    const settings = {...options,\n                        words,\n                        colsNum: columnEl.options[columnEl.selectedIndex].text,\n                        rowsNum: rowEl.options[rowEl.selectedIndex].text\n                    };\n                    questionManager.init(settings);\n                });\n            }\n        },\n\n        /**\n         * Get words from the table.\n         *\n         * @return {Object} The words object.\n         */\n        getWordsFromTable: function() {\n            const answersEl = document.querySelectorAll('fieldset#id_wordhdr .fcontainer .form-group.row');\n            const alphaRegex = /^[a-z]+/;\n            let words = [];\n            let i = 0;\n            let no = 0;\n            let word = {};\n\n            if (!answersEl) {\n                return words;\n            }\n\n            answersEl.forEach(obj => {\n                let inputEl = obj.querySelectorAll('input[type=\"text\"]');\n                let selectEl = obj.querySelectorAll('select');\n\n                if (inputEl.length > 0) {\n                    inputEl.forEach(inputEl => {\n                        const name = inputEl.name.match(alphaRegex)?.pop();\n                        word[name] = inputEl.value.trim();\n                    });\n                }\n\n                if (selectEl.length > 0) {\n                    selectEl.forEach(selectEl => {\n                        const name = selectEl.name.match(alphaRegex)?.pop();\n                        word[name] = selectEl.selectedIndex;\n                    });\n                }\n                i++;\n                if (i !== 0 && i % 2 === 0) {\n                    no++;\n                    word.no = no;\n                    words.push(word);\n                    word = {};\n                }\n            });\n            return words;\n        }\n    };\n\n    /**\n     * @alias module:qtype_crossword/crossword\n     */\n    return {\n        /**\n         * Initialise crossword question.\n         *\n         * @param {Object} options The option for the crossword question.\n         */\n        init: questionManager.init,\n\n        /**\n         * Add event to handle preview action.\n         *\n         * @param {Object} options The option for the crossword question.\n         */\n        addEventHandlersReloadQuestion: questionManager.addEventHandlersReloadQuestion\n    };\n});\n"],"names":["define","ARROW_LEFT","ARROW_RIGHT","ARROW_UP","ARROW_DOWN","FILTER_REGEX","CrossWordQuestion","options","defaultOption","colsNum","rowsNum","words","target","isPreview","previewSetting","backgroundColor","borderColor","textColor","conflictColor","cellWidth","cellHeight","wordNumber","coordinates","targetEls","document","querySelectorAll","i","length","querySelector","crosswordEl","prototype","buildBackgroundTable","alphabet","this","style","tableEl","createElement","className","rowEl","j","squareEl","color","classList","add","innerText","append","innerHTML","outerHTML","addCell","row","rowindex","column","columnindex","answerLength","answer","realLength","allowLength","parseInt","invalidWord","clue","trim","test","orientation","number","labelEl","label","_words$i2","no","spanEl","_words$i","letter","toUpperCase","contentEl","text","search","buildCrossword","width","height","setUpClue","drawCrosswordSVG","syncDataForInit","addEventResizeScreen","readonly","closest","forEach","el","questionId","getAttribute","word","find","o","inputEl","value","makeUnderscore","disabled","addEventForClueInput","svg","createElementNSFrom","viewBox","rectEl","x","y","createCrosswordBody","inputContainEl","createElementFrom","type","maxlength","autocomplete","spellcheck","autocorrect","addEventForWordInput","element","updateLetterIndexForCells","syncLettersByText","count","key","customAttribute","rowIndex","columnIndex","letterIndex","code","position","calculatePosition","g","existingRectElement","textEl","existingNumberElement","currentWord","setAttributeNS","appendCellNumber","addEventForG","textNumber","handleWordSelect","gEl","currentCell","getAttributeNS","focus","match","indexCell","indexOf","undefined","includes","toggleHighlight","focusClue","setStickyClue","attributes","createElementNS","setAttribute","containCrosswordEl","clueEl","clueFocusEl","remove","stickyClue","letterList","letterListArray","Array","slice","call","sort","a","b","aValue","bValue","title","focusedEl","titleData","data","replaceStringData","bindDataToClueInput","conflictPointX","conflictPointY","wordId","startPoint","clueInputEl","replaceAt","toggleFocus","focused","str","replace","focusCellByStartIndex","startIndex","rect","bindClue","syncFocusCellAndInput","setSelectionRange","replaceText","addEventListener","e","tagName","updatePositionForCellInput","getBoundingClientRect","parentEl","inputWrapperEl","top","cssText","left","preventDefault","nextCellEl","dispatchEvent","Event","event","previousCell","nextCell","toLowerCase","ctrlKey","selectionStart","gelEl","nexEl","clipboardData","window","getData","selectString","getSelection","toString","substring","setData","from","join","index","char","split","questionManager","init","crossword","addEventHandlersReloadQuestion","removeAttribute","columnEl","getWordsFromTable","settings","selectedIndex","answersEl","alphaRegex","obj","selectEl","name","_inputEl$name$match","pop","_selectEl$name$match","push"],"mappings":"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"}